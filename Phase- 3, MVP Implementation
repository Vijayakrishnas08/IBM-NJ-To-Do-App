. MVP Features

The Minimum Viable Product (MVP) of the To-Do App should support:

•	 Add a new task
•	 View task list
•	 Mark task as complete / incomplete
•	 Delete a task
•	 Persist tasks in localStorage (so they don’t vanish on refresh).

2.Project Structure

IBM-NJ-To-Do-App/
│── public/
│── src/
│    ├── components/
│    │    ├── TodoInput.js
│    │    ├── TodoList.js
│    │    └── TodoItem.js
│    ├── hooks/
│    │    └── useLocalStorage.js
│    ├── App.js
│    ├── index.js
│    └── App.css
        │── package.json





3. Source Code
index.js

import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import "./App.css";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

App.js

import React, { useState } from "react";
import TodoInput from "./components/TodoInput";
import TodoList from "./components/TodoList";
import useLocalStorage from "./hooks/useLocalStorage";

function App() {
  const [tasks, setTasks] = useLocalStorage("tasks", []);

  const addTask = (taskText) => {
    const newTask = { id: Date.now(), text: taskText, completed: false };
    setTasks([...tasks, newTask]);
  };

  const toggleTask = (id) => {
    setTasks(
      tasks.map((task) =>
        task.id === id ? { ...task, completed: !task.completed } : task
      )
    );
  };

  const deleteTask = (id) => {
    setTasks(tasks.filter((task) => task.id !== id));
  };

  return (
    <div className="app">
      <h1>IBM-NJ To-Do App</h1>
      <TodoInput addTask={addTask} />
      <TodoList tasks={tasks} toggleTask={toggleTask} deleteTask={deleteTask} />
    </div>
  );
}

export default App;

components/TodoInput.js

import React, { useState } from "react";

function TodoInput({ addTask }) {
  const [input, setInput] = useState("");

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!input.trim()) return;
    addTask(input);
    setInput("");
  };

  return (
    <form onSubmit={handleSubmit} className="todo-form">
      <input
        type="text"
        value={input}
        onChange={(e) => setInput(e.target.value)}
        placeholder="Enter a task"
      />
      <button type="submit">Add</button>
    </form>
  );
}

export default TodoInput;

components/TodoItem.js

import React from "react";

function TodoItem({ task, toggleTask, deleteTask }) {
  return (
    <li className={`todo-item ${task.completed ? "completed" : ""}`}>
      <span onClick={() => toggleTask(task.id)}>{task.text}</span>
      <button onClick={() => deleteTask(task.id)}>Delete</button>
    </li>
  );
}

export default TodoItem;








hooks/useLocalStorage.js

import { useState, useEffect } from "react";

function useLocalStorage(key, initialValue) {
  const [value, setValue] = useState(() => {
    const saved = localStorage.getItem(key);
    return saved ? JSON.parse(saved) : initialValue;
  });

  useEffect(() => {
    localStorage.setItem(key, JSON.stringify(value));
  }, [key, value]);

  return [value, setValue];
}

export default useLocalStorage;

App.css

body {
  font-family: Arial, sans-serif;
  background: #f4f6f9;
  display: flex;
  justify-content: center;
  padding: 40px;
}

.app {
  width: 400px;
  background: white;
  padding: 20px;
  border-radius: 12px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

h1 {
  text-align: center;
  margin-bottom: 20px;
}

.todo-form {
  display: flex;
  gap: 10px;
}

.todo-form input {
  flex: 1;
  padding: 8px;
}

.todo-list {
  list-style: none;
  margin: 20px 0 0;
  padding: 0;
}

.todo-item {
  display: flex;
  justify-content: space-between;
  padding: 8px;
  border-bottom: 1px solid #eee;
}

.todo-item.completed span {
  text-decoration: line-through;
  color: gray;
}

4. Running the App

o	Create project:
npx create-react-app ibm-nj-todo
cd ibm-nj-todo

o	Replace src/ files with above code.

o	Run app
npm start

o	Open browser → http://localhost:3000

